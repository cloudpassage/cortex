version: '3.4'
x-halocelery_version:
  &default_halocelery_version docker.io/halotools/halocelery:v0.4.9
x-donbot_version:
  &default_donbot_version docker.io/halotools/don-bot:develop

services:
  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: docker.io/rabbitmq:3-management
    restart: always
    depends_on:
      - redis
    networks:
      - cortex
  flower:
    container_name: flower
    image: *default_halocelery_version
    command: celery flower -A halocelery --address=0.0.0.0 --port=5555 -l INFO
    environment:
      CELERY_BACKEND_URL: redis://redis
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
####################################
#    Flower doesn't use SSL, so only enable this in a controlled
#    troubleshooting environment.  DON-BOT can list tasks for you with
#    "donbot tasks"
#
#    ports:
#      - "5555:5555"
####################################
    restart: always
    read_only: true
    depends_on:
      - rabbitmq
    links:
      - "rabbitmq:5672"
      - "redis:6379"
    networks:
      - cortex
  celeryworker:
    container_name: celeryworker
    image: *default_halocelery_version
    command: celery worker -A halocelery -l INFO
    user: root
    restart: always
    environment:
      CELERY_BACKEND_URL: redis://redis
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
#####################################
# API keys, account information
#####################################
      HALO_API_KEY: ${HALO_API_KEY}
      HALO_API_SECRET_KEY: ${HALO_API_SECRET_KEY}
      HALO_API_KEY_RW: ${HALO_API_KEY_RW}
      HALO_API_SECRET_KEY_RW: ${HALO_API_SECRET_KEY_RW}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_ROLE_NAME: ${AWS_ROLE_NAME}
      AWS_ACCOUNT_NUMBERS: ${AWS_ACCOUNT_NUMBERS}
#####################################
# Container image versions
#####################################
      EC2_HALO_DELTA_VERSION: v0.1
      FIREWALL_GRAPH_VERSION: 0.1.1
      SCANS_TO_S3_VERSION: v0.17
      EVENTS_TO_S3_VERSION: v0.10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - rabbitmq
    links:
      - "rabbitmq:5672"
      - "redis:6379"
    networks:
      - cortex
  redis:
    container_name: redis
    image: docker.io/redis:3-alpine
    restart: always
    networks:
      - cortex
  scheduler:
    container_name: scheduler
    image: *default_halocelery_version
    command: celery beat -A halocelery -l INFO
    restart: always
    depends_on:
      - celeryworker
    links:
      - "rabbitmq:5672"
      - "redis:6379"
      - "flower:5555"
    environment:
      EVENT_EXPORT_HOUR: 19
      EVENT_EXPORT_MIN: 21
      SCAN_EXPORT_HOUR: 19
      SCAN_EXPORT_MIN: 21
      CELERY_BACKEND_URL: redis://redis
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      FLOWER_HOST: http://flower:5555
      SLACK_API_TOKEN: ${SLACK_API_TOKEN}
      SLACK_CHANNEL: ${SLACK_CHANNEL}
      MONITOR_EVENTS: "yes"
      ARCHIVE_SCANS: "yes"
      SCANS_S3_BUCKET: ${SCANS_S3_BUCKET}
      ARCHIVE_EVENTS: "yes"
      EVENTS_S3_BUCKET: ${EVENTS_S3_BUCKET}
    networks:
      - cortex
  donbot:
    container_name: don-bot
    image: *default_donbot_version
    restart: always
    read_only: true
    depends_on:
      - celeryworker
    links:
      - "rabbitmq:5672"
      - "redis:6379"
      - "flower:5555"
    env_file:
      - cortex_conf.env
    environment:
      # NOSLACK: "true"
      CELERY_BACKEND_URL: redis://redis
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      FLOWER_HOST: http://flower:5555
      HALO_API_KEY: ${HALO_API_KEY}
      HALO_API_SECRET_KEY: ${HALO_API_SECRET_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SLACK_API_TOKEN: ${SLACK_API_TOKEN}
      SLACK_CHANNEL: ${SLACK_CHANNEL}
      MONITOR_EVENTS: "yes"
      ARCHIVE_SCANS: "yes"
      SCANS_S3_BUCKET: ${SCANS_S3_BUCKET}
      ARCHIVE_EVENTS: "yes"
      EVENTS_S3_BUCKET: ${EVENTS_S3_BUCKET}
    networks:
      - cortex
networks:
  cortex:
    driver: bridge