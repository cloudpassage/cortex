version: '3.4'
x-halocelery_version:
  &default_halocelery_version docker.io/halotools/halocelery:feature_CS-546
x-donbot_version:
  &default_donbot_version docker.io/halotools/don-bot:feature_CS-546
x-celery_env_vars:
  &default_celery_env_vars
  CELERY_BACKEND_URL: redis://redis
  CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
  CONTAINER_MEM_LIMIT: 256m
x-proxy_env_vars:
  &default_proxy_env_vars
  HTTPS_PROXY: ${HTTPS_PROXY_URL}

services:
#####################################
# Rabbitmq service
#####################################
  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: docker.io/rabbitmq:3-management
    deploy:
      resources:
        limits:
          memory: 256M
    restart: always
    environment:
      << : *default_proxy_env_vars
    depends_on:
      - redis
    networks:
      - cortex
#####################################
# Flower service
#####################################
  flower:
    container_name: flower
    image: *default_halocelery_version
    deploy:
      resources:
        limits:
          memory: 256M
    command: celery flower -A halocelery --address=0.0.0.0 --port=5555 -l INFO
    environment:
      << : *default_celery_env_vars
      << : *default_proxy_env_vars
    restart: always
    read_only: true
    depends_on:
      - rabbitmq
    links:
      - "rabbitmq:5672"
      - "redis:6379"
    networks:
      - cortex
#####################################
# Celeryworker service
#####################################
  celeryworker:
    container_name: celeryworker
    image: *default_halocelery_version
    deploy:
      resources:
        limits:
          memory: 256M
    command: unbuffer celery worker -A halocelery -l INFO
    user: root
    restart: always
    environment:
      << : *default_celery_env_vars
      << : *default_proxy_env_vars
      HALO_API_KEY: ${HALO_API_KEY}
      HALO_API_SECRET_KEY: ${HALO_API_SECRET_KEY}
      HALO_API_KEY_RW: ${HALO_API_KEY_RW}
      HALO_API_SECRET_KEY_RW: ${HALO_API_SECRET_KEY_RW}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - rabbitmq
    links:
      - "rabbitmq:5672"
      - "redis:6379"
    networks:
      - cortex
#####################################
# Redis service
#####################################
  redis:
    container_name: redis
    image: docker.io/redis:3-alpine
    deploy:
      resources:
        limits:
          memory: 256M
    environment:
      << : *default_proxy_env_vars
    restart: always
    networks:
      - cortex
#####################################
# Scheduler service
#####################################
  scheduler:
    container_name: scheduler
    image: *default_halocelery_version
    deploy:
      resources:
        limits:
          memory: 256M
    command: unbuffer celery beat -A halocelery -l INFO
    restart: always
    depends_on:
      - celeryworker
    links:
      - "rabbitmq:5672"
      - "redis:6379"
    environment:
      << : *default_celery_env_vars
      << : *default_proxy_env_vars
      FLOWER_HOST: http://flower:5555
      SLACK_API_TOKEN: ${SLACK_API_TOKEN}
      SLACK_CHANNEL: ${SLACK_CHANNEL}
      SCANS_S3_BUCKET: ${SCANS_S3_BUCKET}
      EVENTS_S3_BUCKET: ${EVENTS_S3_BUCKET}
      HALOCELERY_CONFIG_DIR: /etc/config/
    volumes:
      - "./config/enabled/:/etc/config/"
    networks:
      - cortex
#####################################
# Donbot service
#####################################
  donbot:
    container_name: don-bot
    image: *default_donbot_version
    deploy:
      resources:
        limits:
          memory: 256M
    restart: always
    read_only: true
    depends_on:
      - celeryworker
    links:
      - "rabbitmq:5672"
      - "redis:6379"
      - "flower:5555"
    env_file:
      - cortex_conf.env
    environment:
      << : *default_celery_env_vars
      << : *default_proxy_env_vars
      # NOSLACK: "true"
      FLOWER_HOST: http://flower:5555
      HALO_API_KEY: ${HALO_API_KEY}
      HALO_API_SECRET_KEY: ${HALO_API_SECRET_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SLACK_API_TOKEN: ${SLACK_API_TOKEN}
      SLACK_CHANNEL: ${SLACK_CHANNEL}
      AWS_ROLE_NAME: ${AWS_ROLE_NAME}
      AWS_ACCOUNT_NUMBERS: ${AWS_ACCOUNT_NUMBERS}
      MONITOR_EVENTS: "yes"
      #####################################
      # Donbot's containerized task image versions
      #####################################
      EC2_HALO_DELTA_VERSION: v0.1
      FIREWALL_GRAPH_VERSION: 0.1.1
      SCANS_TO_S3_VERSION: v0.17
      EVENTS_TO_S3_VERSION: v0.10
    networks:
      - cortex

networks:
  cortex:
    driver: bridge
