version: '2'

services:
  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: docker.io/rabbitmq:3-management
    restart: always
    depends_on:
      - redis
    networks:
      - octo_box
  flower:
    container_name: fiery_boat
    image: docker.io/ashmastaflash/fiery-boat:latest
    command: celery flower -A halocelery --address=0.0.0.0 --port=5555 -l INFO
    environment:
      CELERY_BACKEND_URL: redis://redis
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
    ports:
      - "5555:5555"
    restart: always
    depends_on:
      - rabbitmq
    links:
      - "rabbitmq:5672"
      - "redis:6379"
    networks:
      - octo_box
  celeryworker:
    container_name: celeryworker
    image: docker.io/ashmastaflash/fiery-boat:latest
    command: celery worker -A halocelery -l INFO
    restart: always
    environment:
      CELERY_BACKEND_URL: redis://redis
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      HALO_API_KEY: ${HALO_API_KEY}
      HALO_API_SECRET_KEY: ${HALO_API_SECRET_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - rabbitmq
    links:
      - "rabbitmq:5672"
      - "redis:6379"
    networks:
      - octo_box
  redis:
    container_name: redis
    image: docker.io/redis:3-alpine
    restart: always
    networks:
      - octo_box
  scheduler:
    container_name: scheduler
    image: docker.io/ashmastaflash/fiery-boat:latest
    command: celery beat -A halocelery -l INFO
    restart: always
    depends_on:
      - celeryworker
    links:
      - "rabbitmq:5672"
      - "redis:6379"
      - "flower:5555"
    environment:
      EVENT_EXPORT_HOUR: 23
      EVENT_EXPORT_MIN: 01
      SCAN_EXPORT_HOUR: 23
      SCAN_EXPORT_MIN: 01
      CELERY_BACKEND_URL: redis://redis
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      FLOWER_HOST: http://flower:5555
      SLACK_API_TOKEN: ${SLACK_API_TOKEN}
      SLACK_CHANNEL: ${SLACK_CHANNEL}
      MONITOR_EVENTS: "yes"
      ARCHIVE_SCANS: "yes"
      SCANS_S3_BUCKET: ${SCANS_S3_BUCKET}
      ARCHIVE_EVENTS: "yes"
      EVENTS_S3_BUCKET: ${EVENTS_S3_BUCKET}
    networks:
      - octo_box
  octobot:
    container_name: octo-bot
    build: ./bot
    restart: always
    depends_on:
      - celeryworker
    links:
      - "rabbitmq:5672"
      - "redis:6379"
      - "flower:5555"
    environment:
      CELERY_BACKEND_URL: redis://redis
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      FLOWER_HOST: http://flower:5555
      HALO_API_KEY: ${HALO_API_KEY}
      HALO_API_SECRET_KEY: ${HALO_API_SECRET_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SLACK_API_TOKEN: ${SLACK_API_TOKEN}
      SLACK_CHANNEL: ${SLACK_CHANNEL}
      MONITOR_EVENTS: "yes"
      ARCHIVE_SCANS: "yes"
      SCANS_S3_BUCKET: ${SCANS_S3_BUCKET}
      ARCHIVE_EVENTS: "yes"
      EVENTS_S3_BUCKET: ${EVENTS_S3_BUCKET}
    networks:
      - octo_box
  web:
    container_name: web
    build: ./web
    restart: always
    depends_on:
      - celeryworker
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
    environment:
      PORTAL_DNS_NAME: ${PORTAL_DNS_NAME}
    links:
      - "appserver:5000"
    ports:
      - 443:443
    networks:
      - octo_box
  appserver:
    container_name: appserver
    build: ./appserver
    restart: always
    depends_on:
      - celeryworker
    links:
      - "rabbitmq:5672"
      - "redis:6379"
    networks:
      - octo_box

networks:
  octo_box:
    driver: bridge
